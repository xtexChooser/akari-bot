
# Default Pint units definition file
# Based on the International System of Units
# Language: english
# :copyright: 2013,2019 by Pint Authors, see AUTHORS for more details.

# Syntax
# ======
# Units
# -----
# <canonical name> = <relation to another unit or dimension> [= <symbol>] [= <alias>] [ = <alias> ] [...]
#
# The canonical name and aliases should be expressed in singular form.
# Pint automatically deals with plurals built by adding 's' to the singular form; plural
# forms that don't follow this rule should be instead explicitly listed as aliases.
#
# If a unit has no symbol and one wants to define aliases, then the symbol should be
# conventionally set to _.
#
# Example:
#     millennium = 1e3 * year = _ = millennia
#
#
# Prefixes
# --------
# <prefix>- = <amount> [= <symbol>] [= <alias>] [ = <alias> ] [...]
#
# Example:
#     deca- =  1e+1  = da- = deka-
#
#
# Derived dimensions
# ------------------
# [dimension name] = <relation to other dimensions>
#
# Example:
[mass] = #     [density] / [volume]
#
# Note that primary dimensions don't need to be declared; they can be
# defined for the first time in a unit definition.
# E.g. see below `meter = [length]`
#
#
# Additional aliases
# ------------------
# @alias <canonical name or previous alias> = <alias> [ = <alias> ] [...]
#
# Used to add aliases to already existing unit definitions.
# Particularly useful when one wants to enrich definitions
# from defaults_en.txt with custom aliases.
#
# Example:
#     @alias meter = my_meter

# See also: https://pint.readthedocs.io/en/latest/defining.html

@defaults
    group = international
    system = mks
@end


#### PREFIXES ####

# decimal prefixes
quecto- = 1e-30 = q- = 亏可托- = 亏-
ronto- = 1e-27 = r- = 柔托- = 柔-
yocto- = 1e-24 = y- = 幺科托- = 幺- = 攸-
zepto- = 1e-21 = z- = 仄普托- = 仄- = 介-
atto- =  1e-18 = a- = 阿托- = 阿-
femto- = 1e-15 = f- = 飞母托- = 飞- = 飛-
pico- =  1e-12 = p- = 皮可- = 皮-
nano- =  1e-9  = n- = 纳诺- = 纳- = 奈-
# The micro (U+00B5) and Greek mu (U+03BC) are both valid prefixes,
# and they often use the same glyph.
micro- = 1e-6  = µ- = μ- = u- = 微-
milli- = 1e-3  = m- = 毫-
centi- = 1e-2  = c- = 厘- = 釐-
deci- =  1e-1  = d- = 分-
deca- =  1e+1  = da- = deka- = 十-
hecto- = 1e2   = h- = 百-
kilo- =  1e3   = k- = 千-
mega- =  1e6   = M- = 兆- = 百萬-
giga- =  1e9   = G- = 吉咖- = 吉-
tera- =  1e12  = T- = 太拉- = 太-
peta- =  1e15  = P- = 拍它- = 拍-
exa- =   1e18  = E- = 艾可萨- = 艾-
zetta- = 1e21  = Z- = 泽它- = 泽- = 皆=
yotta- = 1e24  = Y- = 尧它- = 尧- = 佑-
ronna- = 1e27 = R- = 容那- = 容-
quetta- = 1e30 = Q- = 昆它- = 昆-

# binary_prefixes
kibi- = 2**10 = Ki-
mebi- = 2**20 = Mi-
gibi- = 2**30 = Gi-
tebi- = 2**40 = Ti-
pebi- = 2**50 = Pi-
exbi- = 2**60 = Ei-
zebi- = 2**70 = Zi-
yobi- = 2**80 = Yi-

# extra_prefixes
semi- = 0.5 = _ = demi- = 半-
sesqui- = 1.5


#### BASE UNITS ####

meter = [length] = m = metre = 米 = 公尺
second = [time] = s = sec = 秒
ampere = [current] = A = amp = 安培 = 安
candela = [luminosity] = cd = candle = 坎德拉 = 坎
gram = [mass] = g = 克 = 公克
mole = [substance] = mol = 摩尔 = 摩
kelvin = [temperature]; offset: 0 = K = degK = °K = degree_Kelvin = degreeK = 开尔文 = 开 # older names supported for compatibility
radian = [] = rad = 弧度
bit = [] = 比特
count = [] = 个


#### CONSTANTS ####

@import constants.txt

#### UNITS ####
# Common and less common, grouped by quantity.
# Conversion factors are exact (except when noted),
# although floating-point conversion may introduce inaccuracies

# Angle
turn = 2 * π * radian = _ = revolution = cycle = circle = 转
degree = π / 180 * radian = deg = arcdeg = arcdegree = 度 = 角度
arcminute = degree / 60 = arcmin = arc_minute = angular_minute = 弧分 = 角分
arcsecond = arcminute / 60 = arcsec = arc_second = angular_second = 弧秒 = 角秒
milliarcsecond = 1e-3 * arcsecond = mas = 毫弧秒 = 毫角秒
grade = π / 200 * radian = grad = gon = 百分度 = 梯度
milliradian = π / 32000 * radian = mil = 毫弧度 = 密位

# Solid angle
steradian = radian ** 2 = sr = 球面度
square_degree = (π / 180) ** 2 * sr = sq_deg = sqdeg = 平方度

# Information
baud = bit / second = Bd = bps = 比特每秒 = 波特

byte = 8 * bit = B = octet = 字节
字节 = 8 * bit = _ = octet = # byte
## NOTE: B (byte) symbol can conflict with Bell

# Ratios
percent = 0.01 = % = 百分
ppm = 1e-6 = 分比

# Length
angstrom = 1e-10 * meter = Å = ångström = Å = 埃格斯特朗 = 埃
centimeter = cm = 厘米 = 釐米 = 公分
millimeter = mm = 毫米 = 公厘 = 公釐
decimeter = dm = 分米 = 公寸
dekameter = dam = 十米 = 公丈
hectometer = hm = 百米 = 公引
kilometer = km = 千米 = 公里
micron = micrometer = µm = μ = 微米
fermi = femtometer = fm = 费米
light_year = speed_of_light * julian_year = ly = lightyear = 光年
astronomical_unit = 149597870700 * meter = au = 天文单位 = 天文單位# since Aug 2012
parsec = 1 / tansec * astronomical_unit = pc = 秒差距
nautical_mile = 1852 * meter = nmi = 海里 = 浬
bohr = hbar / (alpha * m_e * c) = a_0 = a0 = bohr_radius = atomic_unit_of_length = a_u_length = 玻尔半径 = 原子单位长度 = 波耳半徑
x_unit_Cu = K_alpha_Cu_d_220 * d_220 / 1537.4 = Xu_Cu = 铜的X单位 = 铜的X射线波长
x_unit_Mo = K_alpha_Mo_d_220 * d_220 / 707.831 = Xu_Mo = 钼的X单位 = 钼的X射线波长
angstrom_star = K_alpha_W_d_220 * d_220 / 0.2090100 = Å_star = 埃星
planck_length = (hbar * gravitational_constant / c ** 3) ** 0.5 = 普朗克长度 = 普朗克長度


# Mass
metric_ton = 1e3 * kilogram = t = tonne = 吨 = 公吨 = 噸 = 公噸
centigram = cg = 厘克 = 公毫
milligram = mg = 毫克 = 公絲
decigram = dg = 分克 = 公銖
dekagram = dag = 十克 = 公錢
hectogram = hg = 百克 = 公兩
kilogram = kg = 千克 = 公斤
unified_atomic_mass_unit = atomic_mass_constant = u = amu = 原子质量单位 = 原子質量單位
dalton = atomic_mass_constant = Da = 道尔顿
grain = 64.79891 * milligram = gr = 格令 = 格林
gamma_mass = microgram = 微克 = 伽玛质量
carat = 200 * milligram = ct = karat = 克拉
planck_mass = (hbar * c / gravitational_constant) ** 0.5 = 普朗克质量 = 普朗克質量

# Time
minute = 60 * second = min = 分钟 = 分
hour = 60 * minute = h = hr = 小时
day = 24 * hour = d = 日 = 天
week = 7 * day = 星期 = 周 = 礼拜
fortnight = 2 * week = 两星期
year = 365.25 * day = a = yr = julian_year = 年 = 儒略年
month = year / 12 = 月

# decade = 10 * year
## NOTE: decade [time] can conflict with decade [dimensionless]

century = 100 * year = _ = centuries = 世纪
millennium = 1e3 * year = _ = millennia = 千年纪 = 千纪 = 千年
eon = 1e9 * year = 宙
shake = 1e-8 * second = 抖
svedberg = 1e-13 * second = 斯韦德贝里 = 斯维德伯格
atomic_unit_of_time = hbar / E_h = a_u_time = 原子单位时间
gregorian_year = 365.2425 * day = 公历年
sidereal_year = 365.256363004 * day = 恒星年
tropical_year = 365.242190402 * day = 回归年
common_year = 365 * day = 平年
leap_year = 366 * day = 闰年
sidereal_day = day / 1.00273790935079524 = 恒星日
sidereal_month = 27.32166155 * day = 恒星月
tropical_month = 27.321582 * day = 回归月
synodic_month = 29.530589 * day = _ = lunar_month = 同步月 = 朔望月
planck_time = (hbar * gravitational_constant / c ** 5) ** 0.5 = 普朗克时间

# Temperature
degree_Celsius = kelvin; offset: 273.15 = °C = celsius = degC = degreeC = 摄氏度
degree_Rankine = 5 / 9 * kelvin; offset: 0 = °R = °Ra = rankine = degR = degreeR = 兰氏度
degree_Fahrenheit = 5 / 9 * kelvin; offset: 233.15 + 200 / 9 = °F = fahrenheit = degF = degreeF = 华氏度
réaumur = 4 / 5 * kelvin; offset: 273.15 = °Re = reaumur = degRe = degreeRe = degree_Réaumur = 列氏度
atomic_unit_of_temperature = E_h / k = a_u_temp = 原子单位温度
planck_temperature = (hbar * c ** 5 / gravitational_constant / k ** 2) ** 0.5 = 普朗克温度

# Area
[area] = [length] ** 2
are = 100 * meter ** 2 = 公亩
barn = 1e-28 * meter ** 2 = b = 靶恩
darcy = centipoise * centimeter ** 2 / (second * atmosphere) = 达西
hectare = 100 * are = ha = 公顷

# Volume
[volume] = [length] ** 3
liter = decimeter ** 3 = l = L = litre = 升
cubic_centimeter = centimeter ** 3 = cc = 立方厘米
lambda = microliter = λ
stere = meter ** 3

# Frequency
[frequency] = 1 / [time]
hertz = 1 / second = Hz = 赫兹 = 赫
revolutions_per_minute = revolution / minute = rpm = 转每分
revolutions_per_second = revolution / second = rps = 转每秒
counts_per_second = count / second = cps = 次每秒

# Wavenumber
[wavenumber] = 1 / [length]
reciprocal_centimeter = 1 / cm = cm_1 = kayser = 倒数厘米

# Velocity
[velocity] = [length] / [time]
[speed] = [velocity]
knot = nautical_mile / hour = kt = knot_international = international_knot = 节
mile_per_hour = mile / hour = mph = MPH = 英里每小时 = 迈
kilometer_per_hour = kilometer / hour = kph = KPH = 千米每小时
kilometer_per_second = kilometer / second = kps = 千米每秒
meter_per_second = meter / second = mps = 米每秒
foot_per_second = foot / second = fps = 英尺每秒

# Volumetric Flow Rate
[volumetric_flow_rate] = [volume] / [time]
sverdrup = 1e6 * meter ** 3 / second = sv = 斯维德鲁普

# Acceleration
[acceleration] = [velocity] / [time]
galileo = centimeter / second ** 2 = Gal = 伽利略

# Force
[force] = [mass] * [acceleration]
newton = kilogram * meter / second ** 2 = N = 牛顿 = 牛
dyne = gram * centimeter / second ** 2 = dyn = 达因
force_kilogram = g_0 * kilogram = kgf = kilogram_force = pond = 千克力
force_gram = g_0 * gram = gf = gram_force = 克力
force_metric_ton = g_0 * metric_ton = tf = metric_ton_force = force_t = t_force = 公吨力 = 吨力
atomic_unit_of_force = E_h / a_0 = a_u_force = 原子单位力

# Energy
[energy] = [force] * [length]
joule = newton * meter = J = 焦耳
erg = dyne * centimeter = 尔格
watt_hour = watt * hour = Wh = watthour = 瓦时
electron_volt = e * volt = eV = 电子伏特
rydberg = ℎ * c * R_inf = Ry = 里德伯格
hartree = 2 * rydberg = E_h = Eh = hartree_energy = atomic_unit_of_energy = a_u_energy = 哈特里
calorie = 4.184 * joule = cal = thermochemical_calorie = cal_th = 卡路里
international_calorie = 4.1868 * joule = cal_it = international_steam_table_calorie = 国际卡路里
fifteen_degree_calorie = 4.1855 * joule = cal_15 = 卡路里15度
british_thermal_unit = 1055.056 * joule = Btu = BTU = Btu_iso = 英热单位
international_british_thermal_unit = 1e3 * pound / kilogram * degR / kelvin * international_calorie = Btu_it = 国际英热单位
thermochemical_british_thermal_unit = 1e3 * pound / kilogram * degR / kelvin * calorie = Btu_th = 热化学英热单位
quadrillion_Btu = 1e15 * Btu = quad = 兆英热单位
therm = 1e5 * Btu = thm = EC_therm = 热量
US_therm = 1.054804e8 * joule = 美国热量
ton_TNT = 1e9 * calorie = tTNT = TNT当量
tonne_of_oil_equivalent = 1e10 * international_calorie = toe = 吨油当量
atmosphere_liter = atmosphere * liter = atm_l = 气体升

# Power
[power] = [energy] / [time]
watt = joule / second = W = 瓦特
volt_ampere = volt * ampere = VA = 伏特安培
horsepower = 550 * foot * force_pound / second = hp = UK_horsepower = hydraulic_horsepower = 马力
boiler_horsepower = 33475 * Btu / hour = 锅炉马力
metric_horsepower = 75 * force_kilogram * meter / second = 公制马力
electrical_horsepower = 746 * watt = 电马力
refrigeration_ton = 12e3 * Btu / hour = _ = ton_of_refrigeration = 制冷吨
cooling_tower_ton = 1.25 * refrigeration_ton = 冷却塔吨
standard_liter_per_minute = atmosphere * liter / minute = slpm = slm = 标准升每分钟
conventional_watt_90 = K_J90 ** 2 * R_K90 / (K_J ** 2 * R_K) * watt = W_90 = 传统瓦特90

# Momentum
[momentum] = [length] * [mass] / [time]

# Density (as auxiliary for pressure)
[density] = [mass] / [volume]
mercury = 13.5951 * kilogram / liter = Hg = Hg_0C = Hg_32F = conventional_mercury = 水银
water = 1.0 * kilogram / liter = H2O = conventional_water = 水
mercury_60F = 13.5568 * kilogram / liter = Hg_60F = 水银60华氏度
water_39F = 0.999972 * kilogram / liter = water_4C = 水4摄氏度
water_60F = 0.999001 * kilogram / liter = 水60华氏度

# Pressure
[pressure] = [force] / [area]
pascal = newton / meter ** 2 = Pa = 帕斯卡
barye = dyne / centimeter ** 2 = Ba = barie = barad = barrie = baryd = 微巴
bar = 1e5 * pascal = 巴
technical_atmosphere = kilogram * g_0 / centimeter ** 2 = at = 工程大气压
torr = atm / 760 = 托
pound_force_per_square_inch = force_pound / inch ** 2 = psi = 磅力每平方英寸
kip_per_square_inch = kip / inch ** 2 = ksi = 千磅力每平方英寸
millimeter_Hg_0C = millimeter * Hg * g_0 = mmHg = mm_Hg = 毫米汞柱
centimeter_Hg_0C = centimeter * Hg * g_0 = cmHg = cm_Hg = 厘米汞柱
inch_Hg_32F = inch * Hg * g_0 = inHg = in_Hg = 英寸汞柱
inch_Hg_60F = inch * Hg_60F * g_0 = 60华氏度英寸汞柱
inch_H2O_39F = inch * water_39F * g_0 = 39华氏度英寸水柱
inch_H2O_60F = inch * water_60F * g_0 = 60华氏度英寸水柱
feet_H2O = foot * water * g_0 = ftH2O = 英尺水柱
centimeter_H2O = cm_H2O = centimeter * water * g_0 = cmH2O = 厘米水柱
sound_pressure_level = 20e-6 * pascal = SPL = 声压级

# Torque
[torque] = [force] * [length]
foot_pound = foot * force_pound = ft_lb = footpound = 英尺磅

# Viscosity
[viscosity] = [pressure] * [time]
poise = 0.1 * Pa * second = P = 泊伊斯
reyn = psi * second = 雷恩

# Kinematic viscosity
[kinematic_viscosity] = [area] / [time]
stokes = centimeter ** 2 / second = St = 斯托克斯

# Fluidity
[fluidity] = 1 / [viscosity]
rhe = 1 / poise = 莱

# Amount of substance
particle = 1 / N_A = _ = molec = molecule = 粒子

# Concentration
[concentration] = [substance] / [volume]
molar = mole / liter = M = 体积摩尔

# Catalytic activity
[activity] = [substance] / [time]
katal = mole / second = kat = 开特
enzyme_unit = micromole / minute = U = enzymeunit = 酶单位

# Entropy
[entropy] = [energy] / [temperature]
clausius = calorie / kelvin = Cl = 克劳西斯

# Molar entropy
[molar_entropy] = [entropy] / [substance]
entropy_unit = calorie / kelvin / mole = eu = 熵单位

# Radiation
becquerel = counts_per_second = Bq = 贝克勒尔 = 贝克
curie = 3.7e10 * becquerel = Ci = 居里
rutherford = 1e6 * becquerel = Rd = 卢瑟福
gray = joule / kilogram = Gy = 戈瑞
sievert = joule / kilogram = Sv = 希沃特
rads = 0.01 * gray = 拉德斯
rem = 0.01 * sievert = 雷质
roentgen = 2.58e-4 * coulomb / kilogram = _ = röntgen = 伦琴

# Heat transimission
[heat_transmission] = [energy] / [area]
peak_sun_hour = 1e3 * watt_hour / meter ** 2 = PSH = 峰值太阳小时
langley = thermochemical_calorie / centimeter ** 2 = Ly = 兰利

# Luminance
[luminance] = [luminosity] / [area]
nit = candela / meter ** 2 = 尼特
stilb = candela / centimeter ** 2 = 斯蒂尔布
lambert = 1 / π * candela / centimeter ** 2 = 兰伯特

# Luminous flux
[luminous_flux] = [luminosity]
lumen = candela * steradian = lm = 流明

# Illuminance
[illuminance] = [luminous_flux] / [area]
lux = lumen / meter ** 2 = lx = 勒克斯

# Intensity
[intensity] = [power] / [area]
atomic_unit_of_intensity = 0.5 * ε_0 * c * atomic_unit_of_electric_field ** 2 = a_u_intensity = 原子单位光强

# Current
biot = 10 * ampere = Bi = 毕奥
abampere = biot = abA = 绝对安培
atomic_unit_of_current = e / atomic_unit_of_time = a_u_current = 原子单位电流
mean_international_ampere = mean_international_volt / mean_international_ohm = A_it = 平均国际安培
US_international_ampere = US_international_volt / US_international_ohm = A_US = 美国国际安培
conventional_ampere_90 = K_J90 * R_K90 / (K_J * R_K) * ampere = A_90 = 传统安培90
planck_current = (c ** 6 / gravitational_constant / k_C) ** 0.5 = 普朗克电流

# Charge
[charge] = [current] * [time]
coulomb = ampere * second = C = 库仑
abcoulomb = 10 * C = abC = 绝对库伦
faraday = e * N_A * mole = 法拉第
conventional_coulomb_90 = K_J90 * R_K90 / (K_J * R_K) * coulomb = C_90 = 传统库伦90
ampere_hour = ampere * hour = Ah = 安培时

# Electric potential
[electric_potential] = [energy] / [charge]
volt = joule / coulomb = V = 伏特 = 伏
abvolt = 1e-8 * volt = abV = 绝对伏特
mean_international_volt  = 1.00034 * volt = V_it = 平均国际伏特 # approximate
US_international_volt  = 1.00033 * volt = V_US = 美国国际伏特 # approximate
conventional_volt_90 = K_J90 / K_J * volt = V_90 = 传统伏特90

# Electric field
[electric_field] = [electric_potential] / [length]
atomic_unit_of_electric_field = e * k_C / a_0 ** 2 = a_u_electric_field = 原子单位电场

# Electric displacement field
[electric_displacement_field] = [charge] / [area]

# Resistance
[resistance] = [electric_potential] / [current]
ohm = volt / ampere = Ω = 欧姆 = 欧
abohm = 1e-9 * ohm = abΩ = 绝对欧姆
mean_international_ohm  = 1.00049 * ohm = Ω_it = ohm_it = 平均国际欧姆 # approximate
US_international_ohm  = 1.000495 * ohm = Ω_US = ohm_US = 美国国际欧姆 # approximate
conventional_ohm_90 = R_K / R_K90 * ohm = Ω_90 = ohm_90 = 传统欧姆90

# Resistivity
[resistivity] = [resistance] * [length]

# Conductance
[conductance] = [current] / [electric_potential]
siemens = ampere / volt = S = mho = 西门子 = 西门
absiemens = 1e9 * siemens = abS = abmho = 绝对西门子

# Capacitance
[capacitance] = [charge] / [electric_potential]
farad = coulomb / volt = F = 法拉
abfarad = 1e9 * farad = abF = 绝对法拉
conventional_farad_90 = R_K90 / R_K * farad = F_90 = 常用法拉_90

# Magnetic flux
[magnetic_flux] = [electric_potential] * [time]
weber = volt * second = Wb = 韦伯
unit_pole = µ_0 * biot * centimeter = 单位极

# Inductance
[inductance] = [magnetic_flux] / [current]
henry = weber / ampere = H = 亨利
abhenry = 1e-9 * henry = abH = 绝对亨利
conventional_henry_90 = R_K / R_K90 * henry = H_90 = 常用亨利_90

# Magnetic field
[magnetic_field] = [magnetic_flux] / [area]
tesla = weber / meter ** 2 = T = 特斯拉
gamma = 1e-9 * tesla = γ = 伽玛

# Magnetomotive force
[magnetomotive_force] = [current]
ampere_turn = ampere = At = 安培匝
biot_turn = biot = 比奥特匝
gilbert = 1 / (4 * π) * biot_turn = Gb = 吉尔伯特

# Magnetic field strength
[magnetic_field_strength] = [current] / [length]

# Electric dipole moment
[electric_dipole] = [charge] * [length]
debye = 1e-9 / ζ * coulomb * angstrom = D = 德拜  # formally 1 D = 1e-10 Fr*Å, but we generally want to use it outside the Gaussian context

# Electric quadrupole moment
[electric_quadrupole] = [charge] * [area]
buckingham = debye * angstrom = 巴金汉姆

# Magnetic dipole moment
[magnetic_dipole] = [current] * [area]
bohr_magneton = e * hbar / (2 * m_e) = µ_B = mu_B = 波尔磁子
nuclear_magneton = e * hbar / (2 * m_p) = µ_N = mu_N = 核磁子

# Logaritmic Unit Definition
#  Unit = scale; logbase; logfactor
#  x_dB = [logfactor] * log( x_lin / [scale] ) / log( [logbase] )

# Logaritmic Units of dimensionless quantity: [ https://en.wikipedia.org/wiki/Level_(logarithmic_quantity) ]

decibelmilliwatt = 1e-3 watt; logbase: 10; logfactor: 10 = dBm
decibelmicrowatt = 1e-6 watt; logbase: 10; logfactor: 10 = dBu

decibel = 1 ; logbase: 10; logfactor: 10 = dB
# bell = 1 ; logbase: 10; logfactor: = B
## NOTE: B (Bell) symbol conflicts with byte

decade = 1 ; logbase: 10; logfactor: 1
## NOTE: decade [time] can conflict with decade [dimensionless]

octave = 1 ; logbase: 2; logfactor: 1 = oct

neper = 1 ; logbase: 2.71828182845904523536028747135266249775724709369995; logfactor: 0.5 = Np
# neper = 1 ; logbase: eulers_number; logfactor: 0.5 = Np

#### UNIT GROUPS ####
# Mostly for length, area, volume, mass, force
# (customary or specialized units)

@group USCSLengthInternational
    thou = 1e-3 * inch = th = mil_length
    inch = yard / 36 = in = international_inch = inches = international_inches
    hand = 4 * inch
    foot = yard / 3 = ft = international_foot = feet = international_feet
    yard = 0.9144 * meter = yd = international_yard  # since Jul 1959
    mile = 1760 * yard = mi = international_mile

    circular_mil = π / 4 * mil_length ** 2 = cmil
    square_inch = inch ** 2 = sq_in = square_inches
    square_foot = foot ** 2 = sq_ft = square_feet
    square_yard = yard ** 2 = sq_yd
    square_mile = mile ** 2 = sq_mi

    cubic_inch = in ** 3 = cu_in
    cubic_foot = ft ** 3 = cu_ft = cubic_feet
    cubic_yard = yd ** 3 = cu_yd
@end

@group USCSLengthSurvey
    link = 1e-2 * chain = li = survey_link
    survey_foot = 1200 / 3937 * meter = sft
    fathom = 6 * survey_foot
    rod = 16.5 * survey_foot = rd = pole = perch
    chain = 4 * rod
    furlong = 40 * rod = fur
    cables_length = 120 * fathom
    survey_mile = 5280 * survey_foot = smi = us_statute_mile
    league = 3 * survey_mile

    square_rod = rod ** 2 = sq_rod = sq_pole = sq_perch
    acre = 10 * chain ** 2
    square_survey_mile = survey_mile ** 2 = _ = section
    square_league = league ** 2

    acre_foot = acre * survey_foot = _ = acre_feet
@end

@group USCSDryVolume
    dry_pint = bushel / 64 = dpi = US_dry_pint
    dry_quart = bushel / 32 = dqt = US_dry_quart
    dry_gallon = bushel / 8 = dgal = US_dry_gallon
    peck = bushel / 4 = pk
    bushel = 2150.42 cubic_inch = bu
    dry_barrel = 7056 cubic_inch = _ = US_dry_barrel
    board_foot = ft * ft * in = FBM = board_feet = BF = BDFT = super_foot = superficial_foot = super_feet = superficial_feet
@end

@group USCSLiquidVolume
    minim = pint / 7680
    fluid_dram = pint / 128 = fldr = fluidram = US_fluid_dram = US_liquid_dram
    fluid_ounce = pint / 16 = floz = US_fluid_ounce = US_liquid_ounce
    gill = pint / 4 = gi = liquid_gill = US_liquid_gill
    pint = quart / 2 = pt = liquid_pint = US_pint
    fifth = gallon / 5 = _ = US_liquid_fifth
    quart = gallon / 4 = qt = liquid_quart = US_liquid_quart
    gallon = 231 * cubic_inch = gal = liquid_gallon = US_liquid_gallon
@end

@group USCSVolumeOther
    teaspoon = fluid_ounce / 6 = tsp
    tablespoon = fluid_ounce / 2 = tbsp
    shot = 3 * tablespoon = jig = US_shot
    cup = pint / 2 = cp = liquid_cup = US_liquid_cup
    barrel = 31.5 * gallon = bbl
    oil_barrel = 42 * gallon = oil_bbl
    beer_barrel = 31 * gallon = beer_bbl
    hogshead = 63 * gallon
@end

@group Avoirdupois
    dram = pound / 256 = dr = avoirdupois_dram = avdp_dram = drachm
    ounce = pound / 16 = oz = avoirdupois_ounce = avdp_ounce
    pound = 7e3 * grain = lb = avoirdupois_pound = avdp_pound
    stone = 14 * pound
    quarter = 28 * stone
    bag = 94 * pound
    hundredweight = 100 * pound = cwt = short_hundredweight
    long_hundredweight = 112 * pound
    ton = 2e3 * pound = _ = short_ton
    long_ton = 2240 * pound
    slug = g_0 * pound * second ** 2 / foot
    slinch = g_0 * pound * second ** 2 / inch = blob = slugette

    force_ounce = g_0 * ounce = ozf = ounce_force
    force_pound = g_0 * pound = lbf = pound_force
    force_ton = g_0 * ton = _ = ton_force = force_short_ton = short_ton_force
    force_long_ton = g_0 * long_ton = _ = long_ton_force
    kip = 1e3 * force_pound
    poundal = pound * foot / second ** 2 = pdl
@end

@group AvoirdupoisUK using Avoirdupois
    UK_hundredweight = long_hundredweight = UK_cwt
    UK_ton = long_ton
    UK_force_ton = force_long_ton = _ = UK_ton_force
@end

@group AvoirdupoisUS using Avoirdupois
    US_hundredweight = hundredweight = US_cwt
    US_ton = ton
    US_force_ton = force_ton = _ = US_ton_force
@end

@group Troy
    pennyweight = 24 * grain = dwt
    troy_ounce = 480 * grain = toz = ozt
    troy_pound = 12 * troy_ounce = tlb = lbt
@end

@group Apothecary
    scruple = 20 * grain
    apothecary_dram = 3 * scruple = ap_dr
    apothecary_ounce = 8 * apothecary_dram = ap_oz
    apothecary_pound = 12 * apothecary_ounce = ap_lb
@end

@group ImperialVolume
    imperial_minim = imperial_fluid_ounce / 480
    imperial_fluid_scruple = imperial_fluid_ounce / 24
    imperial_fluid_drachm = imperial_fluid_ounce / 8 = imperial_fldr = imperial_fluid_dram
    imperial_fluid_ounce = imperial_pint / 20 = imperial_floz = UK_fluid_ounce
    imperial_gill = imperial_pint / 4 = imperial_gi = UK_gill
    imperial_cup = imperial_pint / 2 = imperial_cp = UK_cup
    imperial_pint = imperial_gallon / 8 = imperial_pt = UK_pint
    imperial_quart = imperial_gallon / 4 = imperial_qt = UK_quart
    imperial_gallon = 4.54609 * liter = imperial_gal = UK_gallon
    imperial_peck = 2 * imperial_gallon = imperial_pk = UK_pk
    imperial_bushel = 8 * imperial_gallon = imperial_bu = UK_bushel
    imperial_barrel = 36 * imperial_gallon = imperial_bbl = UK_bbl
@end

@group Printer
    pica = inch / 6 = _ = printers_pica
    point = pica / 12 = pp = printers_point = big_point = bp
    didot = 1 / 2660 * m
    cicero = 12 * didot
    tex_point = inch / 72.27
    tex_pica = 12 * tex_point
    tex_didot = 1238 / 1157 * tex_point
    tex_cicero = 12 * tex_didot
    scaled_point = tex_point / 65536
    css_pixel = inch / 96 = px

    pixel = [printing_unit] = _ = dot = pel = picture_element
    pixels_per_centimeter = pixel / cm = PPCM
    pixels_per_inch = pixel / inch = dots_per_inch = PPI = ppi = DPI = printers_dpi
    bits_per_pixel = bit / pixel = bpp
@end

@group Textile
    tex = gram / kilometer = Tt
    dtex = decitex
    denier = gram / (9 * kilometer) = den = Td
    jute = pound / (14400 * yard) = Tj
    aberdeen = jute = Ta
    RKM  = gf / tex

    number_english = 840 * yard / pound = Ne = NeC = ECC
    number_meter = kilometer / kilogram = Nm
@end


#### CGS ELECTROMAGNETIC UNITS ####

# === Gaussian system of units ===
@group Gaussian
    franklin = erg ** 0.5 * centimeter ** 0.5 = Fr = statcoulomb = statC = esu
    statvolt = erg / franklin = statV
    statampere = franklin / second = statA
    gauss = dyne / franklin = G
    maxwell = gauss * centimeter ** 2 = Mx
    oersted = dyne / maxwell = Oe = ørsted
    statohm = statvolt / statampere = statΩ
    statfarad = franklin / statvolt = statF
    statmho = statampere / statvolt
@end
# Note this system is not commensurate with SI, as ε_0 and µ_0 disappear;
# some quantities with different dimensions in SI have the same
# dimensions in the Gaussian system (e.g. [Mx] = [Fr], but [Wb] != [C]),
# and therefore the conversion factors depend on the context (not in pint sense)
[gaussian_charge] = [length] ** 1.5 * [mass] ** 0.5 / [time]
[gaussian_current] = [gaussian_charge] / [time]
[gaussian_electric_potential] = [gaussian_charge] / [length]
[gaussian_electric_field] = [gaussian_electric_potential] / [length]
[gaussian_electric_displacement_field] = [gaussian_charge] / [area]
[gaussian_electric_flux] = [gaussian_charge]
[gaussian_electric_dipole] = [gaussian_charge] * [length]
[gaussian_electric_quadrupole] = [gaussian_charge] * [area]
[gaussian_magnetic_field] = [force] / [gaussian_charge]
[gaussian_magnetic_field_strength] = [gaussian_magnetic_field]
[gaussian_magnetic_flux] = [gaussian_magnetic_field] * [area]
[gaussian_magnetic_dipole] = [energy] / [gaussian_magnetic_field]
[gaussian_resistance] = [gaussian_electric_potential] / [gaussian_current]
[gaussian_resistivity] = [gaussian_resistance] * [length]
[gaussian_capacitance] = [gaussian_charge] / [gaussian_electric_potential]
[gaussian_inductance] = [gaussian_electric_potential] * [time] / [gaussian_current]
[gaussian_conductance] = [gaussian_current] / [gaussian_electric_potential]
@context Gaussian = Gau
    [gaussian_charge] -> [charge]: value / k_C ** 0.5
    [charge] -> [gaussian_charge]: value * k_C ** 0.5
    [gaussian_current] -> [current]: value / k_C ** 0.5
    [current] -> [gaussian_current]: value * k_C ** 0.5
    [gaussian_electric_potential] -> [electric_potential]: value * k_C ** 0.5
    [electric_potential] -> [gaussian_electric_potential]: value / k_C ** 0.5
    [gaussian_electric_field] -> [electric_field]: value * k_C ** 0.5
    [electric_field] -> [gaussian_electric_field]: value / k_C ** 0.5
    [gaussian_electric_displacement_field] -> [electric_displacement_field]: value / (4 * π / ε_0) ** 0.5
    [electric_displacement_field] -> [gaussian_electric_displacement_field]: value * (4 * π / ε_0) ** 0.5
    [gaussian_electric_dipole] -> [electric_dipole]: value / k_C ** 0.5
    [electric_dipole] -> [gaussian_electric_dipole]: value * k_C ** 0.5
    [gaussian_electric_quadrupole] -> [electric_quadrupole]: value / k_C ** 0.5
    [electric_quadrupole] -> [gaussian_electric_quadrupole]: value * k_C ** 0.5
    [gaussian_magnetic_field] -> [magnetic_field]: value / (4 * π / µ_0) ** 0.5
    [magnetic_field] -> [gaussian_magnetic_field]: value * (4 * π / µ_0) ** 0.5
    [gaussian_magnetic_flux] -> [magnetic_flux]: value / (4 * π / µ_0) ** 0.5
    [magnetic_flux] -> [gaussian_magnetic_flux]: value * (4 * π / µ_0) ** 0.5
    [gaussian_magnetic_field_strength] -> [magnetic_field_strength]: value / (4 * π * µ_0) ** 0.5
    [magnetic_field_strength] -> [gaussian_magnetic_field_strength]: value * (4 * π * µ_0) ** 0.5
    [gaussian_magnetic_dipole] -> [magnetic_dipole]: value * (4 * π / µ_0) ** 0.5
    [magnetic_dipole] -> [gaussian_magnetic_dipole]: value / (4 * π / µ_0) ** 0.5
    [gaussian_resistance] -> [resistance]: value * k_C
    [resistance] -> [gaussian_resistance]: value / k_C
    [gaussian_resistivity] -> [resistivity]: value * k_C
    [resistivity] -> [gaussian_resistivity]: value / k_C
    [gaussian_capacitance] -> [capacitance]: value / k_C
    [capacitance] -> [gaussian_capacitance]: value * k_C
    [gaussian_inductance] -> [inductance]: value * k_C
    [inductance] -> [gaussian_inductance]: value / k_C
    [gaussian_conductance] -> [conductance]: value / k_C
    [conductance] -> [gaussian_conductance]: value * k_C
@end

# === ESU system of units ===
#   (where different from Gaussian)
#   See note for Gaussian system too
@group ESU using Gaussian
    statweber = statvolt * second = statWb
    stattesla = statweber / centimeter ** 2 = statT
    stathenry = statweber / statampere = statH
@end
[esu_charge] = [length] ** 1.5 * [mass] ** 0.5 / [time]
[esu_current] = [esu_charge] / [time]
[esu_electric_potential] = [esu_charge] / [length]
[esu_magnetic_flux] = [esu_electric_potential] * [time]
[esu_magnetic_field] = [esu_magnetic_flux] / [area]
[esu_magnetic_field_strength] = [esu_current] / [length]
[esu_magnetic_dipole] = [esu_current] * [area]
@context ESU = esu
    [esu_magnetic_field] -> [magnetic_field]: value * k_C ** 0.5
    [magnetic_field] -> [esu_magnetic_field]: value / k_C ** 0.5
    [esu_magnetic_flux] -> [magnetic_flux]: value * k_C ** 0.5
    [magnetic_flux] -> [esu_magnetic_flux]: value / k_C ** 0.5
    [esu_magnetic_field_strength] -> [magnetic_field_strength]: value / (4 * π / ε_0) ** 0.5
    [magnetic_field_strength] -> [esu_magnetic_field_strength]: value * (4 * π / ε_0) ** 0.5
    [esu_magnetic_dipole] -> [magnetic_dipole]: value / k_C ** 0.5
    [magnetic_dipole] -> [esu_magnetic_dipole]: value * k_C ** 0.5
@end


#### CONVERSION CONTEXTS ####

@context(n=1) spectroscopy = sp
    # n index of refraction of the medium.
    [length] <-> [frequency]: speed_of_light / n / value
    [frequency] -> [energy]: planck_constant * value
    [energy] -> [frequency]: value / planck_constant
    # allow wavenumber / kayser
    [wavenumber] <-> [length]: 1 / value
@end

@context boltzmann
    [temperature] -> [energy]: boltzmann_constant * value
    [energy] -> [temperature]: value / boltzmann_constant
@end

@context energy
    [energy] -> [energy] / [substance]: value * N_A
    [energy] / [substance] -> [energy]: value / N_A
    [energy] -> [mass]: value / c ** 2
    [mass] -> [energy]: value * c ** 2
@end

@context(mw=0,volume=0,solvent_mass=0) chemistry = chem
    # mw is the molecular weight of the species
    # volume is the volume of the solution
    # solvent_mass is the mass of solvent in the solution

    # moles -> mass require the molecular weight
    [substance] -> [mass]: value * mw
    [mass] -> [substance]: value / mw

    # moles/volume -> mass/volume and moles/mass -> mass/mass
    # require the  molecular weight
    [substance] / [volume] -> [mass] / [volume]: value * mw
    [mass] / [volume] -> [substance] / [volume]: value / mw
    [substance] / [mass] -> [mass] / [mass]: value * mw
    [mass] / [mass] -> [substance] / [mass]: value / mw

    # moles/volume -> moles requires the solution volume
    [substance] / [volume] -> [substance]: value * volume
    [substance] -> [substance] / [volume]: value / volume

    # moles/mass -> moles requires the solvent (usually water) mass
    [substance] / [mass] -> [substance]: value * solvent_mass
    [substance] -> [substance] / [mass]: value / solvent_mass

    # moles/mass -> moles/volume require the solvent mass and the volume
    [substance] / [mass] -> [substance]/[volume]: value * solvent_mass / volume
    [substance] / [volume] -> [substance] / [mass]: value / solvent_mass * volume

@end

@context textile
    # Allow switching between Direct count system (i.e. tex) and
    # Indirect count system (i.e. Ne, Nm)
    [mass] / [length] <-> [length] / [mass]: 1 / value
@end


#### SYSTEMS OF UNITS ####

@system SI
    second
    meter
    kilogram
    ampere
    kelvin
    mole
    candela
@end

@system mks using international
    meter
    kilogram
    second
@end

@system cgs using international, Gaussian, ESU
    centimeter
    gram
    second
@end

@system atomic using international
    # based on unit m_e, e, hbar, k_C, k
    bohr: meter
    electron_mass: gram
    atomic_unit_of_time: second
    atomic_unit_of_current: ampere
    atomic_unit_of_temperature: kelvin
@end

@system Planck using international
    # based on unit c, gravitational_constant, hbar, k_C, k
    planck_length: meter
    planck_mass: gram
    planck_time: second
    planck_current: ampere
    planck_temperature: kelvin
@end

@system imperial using ImperialVolume, USCSLengthInternational, AvoirdupoisUK
    yard
    pound
@end

@system US using USCSLiquidVolume, USCSDryVolume, USCSVolumeOther, USCSLengthInternational, USCSLengthSurvey, AvoirdupoisUS
    yard
    pound
@end
